# -*- coding: utf-8 -*-
"""13_07_2024_Matplotlib.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DS4Od_bMmsLVDqwOTOz11QpjFYbmJq4N
"""



"""Data visualizations

MATPLOTLIB (https://matplotlib.org/stable/gallery/index.html
"""

import matplotlib.pyplot as plt
import numpy as np

from matplotlib.patches import PathPatch
from matplotlib.path import Path

N = 400
t = np.linspace(0, 2 * np.pi, N)
r = 0.5 + np.cos(t)
x, y = r * np.cos(t), r * np.sin(t)

fig, ax = plt.subplots()
ax.plot(x, y, "k")
ax.set(aspect=1)

# Sample data representing the average temperature (in degrees Celsius) from 2010 to 2014
data = {'Year': [2010, 2011, 2012, 2013, 2014],
        'Avg_Temperature': [14.1, 14.3, 14.5, 14.2, 14.6]} #this is a dictionary

import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(data)
df

# VERSION ONE

plt.plot(df['Year'], df['Avg_Temperature'], marker='o') #first value is X asis, second is Y

plt.title('Average temperature from 2010 to 2014') #we added a title
plt.xlabel('Year') #x-axis name label
plt.ylabel('Temperature') #y-axis name label

plt.xticks(df['Year']) #year values are rounded
plt.grid(True) #grid
plt.show() #show you the visualization

# VERSION TWO

df.plot(x='Year', y='Avg_Temperature', kind='line', marker='o')
plt.title('Average temperature from 2010 to 2014')
plt.xlabel('Year')
plt.ylabel('Temperature')
plt.xticks(df['Year'])
plt.grid(True)
plt.show()

# BAR CHART

plt.bar(df['Year'], df['Avg_Temperature'], color='skyblue')
plt.title('Average temperature from 2010 to 2014')
plt.xlabel('Year')
plt.ylabel('Temperature')

# H-BAR CHART

plt.barh(df['Year'], df['Avg_Temperature'], color='orange')
plt.title('Average temperature from 2010 to 2014')
plt.xlabel('Temperature')
plt.ylabel('Year')

# HISTOGRAM - presents the distribution of a single variable, frequency, represents numerical data (how often a variable appears)

data2 = {'Scores': [85, 92, 78, 20, 89, 82, 56, 60, 23, 90, 40, 77]}
df2 = pd.DataFrame(data2)
df2

plt.hist(df2['Scores'], bins=3, color='green',edgecolor='black') #bins mean in how many groups the data will be defined

# SCATTER PLOT - used to visualization the relationship between two variables

data3 = {'X': [1,2,3,5,5,2], 'Y' : [5,8,7,4,9,5]}
df3 = pd.DataFrame(data3)
df3

plt.scatter(x=df3['X'], y=df3['Y'], color='red', marker='o')
plt.title('Scatter plot')
plt.xlabel('X')
plt.ylabel('Y')
plt.grid(True)
plt.show()

# PIE CHART - represents parts of a whole

data4 = {'Category': ['A', 'B', 'C', 'D'], 'Values': [15, 30, 24, 40]}
df4 = pd.DataFrame(data4)
df4

plt.pie(df4['Values'], labels=df4['Category'], autopct='%1.1f%%')
plt.title('Pie chart')
plt.show()

# BOX PLOT - distribution of a dataset and idenifies outliers
plt.boxplot(df4['Values'])
plt.grid(True)
plt.show()

"""Value count"""

dataset = pd.read_csv('/content/transaction_dataset.csv')

dataset.head()

dataset.info()

# VALUE COUNTS - how many times a value repeats? Work on series - thats why we need to define a column.
dataset['Category'].value_counts()
dataset['Gender'].value_counts(dropna=False).reset_index() #to also see NaN values